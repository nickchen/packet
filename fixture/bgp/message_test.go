package bgp

import (
	"fmt"
	"testing"

	"github.com/nickchen/packet"
	"github.com/stretchr/testify/assert"

	"github.com/davecgh/go-spew/spew"
)

var testBGPUpdateMessage = []byte{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x00, 0x3d, 0x02, 0x00, 0x00, 0x00, 0x12, 0x40, 0x01, 0x01, 0x00, 0x40, 0x02, 0x04,
	0x02, 0x01, 0xfd, 0xe8, 0x40, 0x03, 0x04, 0xc0, 0xa8, 0x56, 0x64, 0x18, 0x0a, 0x01, 0x03, 0x18,
	0x0a, 0x01, 0x06, 0x18, 0x0a, 0x01, 0x07, 0x18, 0x0a, 0x01, 0x04, 0x18, 0x0a, 0x01, 0x05,
}

// testBGPKeepaliveMessage single BGP Keepalive
var testBGPKeepaliveMessage = []byte{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x00, 0x13, 0x04,
}

// testBGPComboMessage has two UPDATE message
var testBGPComboMessage = []byte{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x00, 0x13, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x00, 0x62, 0x02, 0x00, 0x00, 0x00, 0x48, 0x40, 0x01, 0x01, 0x02, 0x40, 0x02,
	0x0a, 0x01, 0x02, 0x01, 0xf4, 0x01, 0xf4, 0x02, 0x01, 0xfe, 0xbb, 0x40, 0x03, 0x04, 0xc0, 0xa8,
	0x00, 0x0f, 0x40, 0x05, 0x04, 0x00, 0x00, 0x00, 0x64, 0x40, 0x06, 0x00, 0xc0, 0x07, 0x06, 0xfe,
	0xba, 0xc0, 0xa8, 0x00, 0x0a, 0xc0, 0x08, 0x0c, 0xfe, 0xbf, 0x00, 0x01, 0x03, 0x16, 0x00, 0x04,
	0x01, 0x54, 0x00, 0xfa, 0x80, 0x09, 0x04, 0xc0, 0xa8, 0x00, 0x0f, 0x80, 0x0a, 0x04, 0xc0, 0xa8,
	0x00, 0xfa, 0x10, 0xac, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x63, 0x02, 0x00, 0x00, 0x00, 0x48, 0x40, 0x01, 0x01, 0x00,
	0x40, 0x02, 0x0a, 0x01, 0x02, 0x01, 0xf4, 0x01, 0xf4, 0x02, 0x01, 0xfe, 0xbb, 0x40, 0x03, 0x04,
	0xc0, 0xa8, 0x00, 0x0f, 0x40, 0x05, 0x04, 0x00, 0x00, 0x00, 0x64, 0x40, 0x06, 0x00, 0xc0, 0x07,
	0x06, 0xfe, 0xba, 0xc0, 0xa8, 0x00, 0x0a, 0xc0, 0x08, 0x0c, 0xfe, 0xbf, 0x00, 0x01, 0x03, 0x16,
	0x00, 0x04, 0x01, 0x54, 0x00, 0xfa, 0x80, 0x09, 0x04, 0xc0, 0xa8, 0x00, 0x0f, 0x80, 0x0a, 0x04,
	0xc0, 0xa8, 0x00, 0xfa, 0x16, 0xc0, 0xa8, 0x04}

func printDetailErrorInformation(err error) {
	switch et := err.(type) {
	case *packet.UnmarshalUnexpectedEnd:
		fmt.Printf("Offset: %d End: %d\n", et.Offset, et.End)
	}
}

func checkBGP(t *testing.T, want *Message, packetBytes []byte, MessageType MessageType) {
	bgp := &Message{}
	err := packet.Unmarshal(packetBytes, bgp)
	if err != nil {
		t.Error("Failed to decode packet:", err)
		printDetailErrorInformation(err)
		fmt.Printf("Len: %d\n", len(packetBytes))
	}
	fmt.Printf("Message: %+v\n", bgp)
	if bgp.Body != nil {
		fmt.Printf("Body: %+v\n", bgp.Body)
	}
	assert.Equal(t, bgp.Type, MessageType, "message type not equal")
	spew.Dump(bgp)
	assert.Equal(t, want, bgp, "object not equal")
	// if !reflect.DeepEqual(bgp, want) {
	// 	t.Errorf("BGP packet processing failed:\ngot  :\n%+v\n\nwant :\n%#v\n\n", bgp, want)
	// }

	// buf := gopacket.NewSerializeBuffer()
	// opts := gopacket.SerializeOptions{}
	// err = want.SerializeTo(buf, opts)
	// if err != nil {
	// 	t.Error(err)
	// }

	// if !reflect.DeepEqual(bgp.BaseLayer.Contents, buf.Bytes()) {
	// 	t.Errorf("BGP packet serialization failed for packet "+
	// 		":\ngot  :\n%x\n\nwant :\n%x\n\n", buf.Bytes(), bgp.BaseLayer.Contents)
	// }
}

func TestBGPUpdateMessage(t *testing.T) {
	want := &Message{
		Marker: _16ByteMaker,
		Type:   _Update,
		Length: 61,
		Body: &Update{
			WithdrawnLength:     0,
			PathAttributeLength: 18,
			PathAttributes: []PathAttribute{
				PathAttribute{
					Flags:  0x0,
					Code:   Origin,
					Length: 1,
					Data:   &OriginAttribute{Origin: IBGP},
				},
				PathAttribute{
					Flags:  0x0,
					Code:   AsPath,
					Length: 4,
					Data: &[]AsPathAttribute{
						AsPathAttribute{Type: AsSequence, Count: 1, List: []ASN{ASN(65000)}},
					},
				},
				PathAttribute{
					Flags:  0x0,
					Code:   Nexthop,
					Length: 4,
					Data:   &[]byte{0xc0, 0xa8, 0x56, 0x64},
				},
			},
			NLRI: []PrefixSpec{
				PrefixSpec{
					Length: 24,
					Prefix: []byte{0x0a, 0x01, 0x03},
				},
				PrefixSpec{
					Length: 24,
					Prefix: []byte{0x0a, 0x01, 0x06},
				},
				PrefixSpec{
					Length: 24,
					Prefix: []byte{0x0a, 0x01, 0x07},
				},
				PrefixSpec{
					Length: 24,
					Prefix: []byte{0x0a, 0x01, 0x04},
				},
				PrefixSpec{
					Length: 24,
					Prefix: []byte{0x0a, 0x01, 0x05},
				},
			},
		},
	}
	checkBGP(t, want, testBGPUpdateMessage, _Update)
}
